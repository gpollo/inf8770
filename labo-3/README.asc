= Laboratoire 3

[.text-center]
Décomposition d’une Séquence Vidéo en Prises de Vue

[.text-center]
Gabriel-Andrew Pollo-Guilbert, _1837776_

== Question 1
La vidéo `anni009` est une vidéo datante enregistrée sur un film analogique qui s'est probablement
déterioré à travers les années. Par conséquent, l'image contient beaucoup de bruit et elle semble
aussi vaciller ou trembler. L'outil devra prendre en considération ce bruit avec peut-être
l'addition d'un filtre dans son processus.

Dû à son age et probablement aux technologies utilisées, cette vidéo a une plage dynamique de
couleur assez faible, ce qui rend plus difficile les techniques de décoposition en prises de vue
basées sur le contenue chromatique d'une image.

Finalement, la vidéo semble aussi avoir été très compressé. Il y a beaucoup d'artéfactes de
compression vidéo comme l'effet de bloc causé par une DCT. Ce qui augmente encore plus le bruit
dans la vidéo. Il est fort probable que la décomposition en prises de vue ne détecte pas assez
de transition ou beaucoup trop de faux position en raison de la grande quantité de bruit dans
les images.

== Question 2
Afin de décomposer une séquence vidéo en prises du vue, il y a deux choix principaux vue en classe:
à l'aide d'un histogramme ou à l'aide des arrêtes.

La première méthode construit des histogrammes de couleurs pour chacune image afin de les comparer.
Cela dit, la source principale d'information est l'information chromatique de chaque image. Nous
avons mentionné ci-dessus que cette information pourrait être moins fiable en raison de la plage
dynamique de couleur étroite.

Par conséquent, la méthode par comparaison des arrêtes sembles plus appropriées, car elle utilise
une autre source d'information que les couleurs. Par contre, la grande quantité d'artéfactes
de compression dans l'image pourrait causer des fausses arrêtes d'être détectées. Donc, il est
important de bien configurer le seuil de détection d'arrête afin de miniser le bruit néfaste dans
les arrêtes détectées.

L'algorithme de la décomposition selon les arrêtes de chaque trame consiste premièrement à détecter
les arrêtes dans une image. La méthode la plus simple et populaire consiste à appliquer un filtre
de Sobel et d'ensuite utiliser un seuil pour définir les pixels étant des arrêtes.

Une fois les arrêtes calculées pour chaque image, on cherche à déterminer les arrêtes sortantes et
entrantes à une trame `t` vers une trame `t+1`. Pour se faire, il suffit de déterminer si un
pixel d'arrête dans l'image `t` se trouve dans l'image `t+1`. Puisque le pixel a fort probablement
bougé l'image suivante, on effectue une recherche dans les alentour. Une méthode efficace est de
dilater les pixels d'arrêtes de l'image suivante et de tout simplement vérifier si le pixel
de la première trame se trouve dans la deuxième.

Par la suite, on détermine s'il une transition à lieu en fonction des arrêtes entrantes et
sortantes. Une coupure est détectée lorsque le maximum entre les arrêtes sortantes et entrantes
est plus élevé qu'un seuil prédéterminé.

Pour les fondues, on utilise une méthode simple. On détermine les pics locaux dans les arrêtes
entrantes et sortantes. Si ce pic n'est pas une coupure, alors on regarde s'il est dans un
intervalle prédéfinie. Dans le cas positif, on estime que la fondue démarre quelques images avant
et finis quelques images après. On utilise cette technique, car nos premières observations de nos
données montrent beaucoup de bruit et il est très difficile d'isoler les fondus avec une bonne
précision.

== Question 3
L'algorithme fut implémenter en Go, un language développé et utilisé par Google visant la
simplicité et la rapidité de développement et d'exécution. Afin d'obtenir des bonnes performances
et de pouvoir rapidement ajuster l'algorithme, celui-ci fut parralléliser sur plusieurs noeuds
d'exécution à l'aide d'un pipeline d'exécution suivant:

1. 3 noeuds s'occupant de charger chaque image en mémoire
2. 20 noeuds exécutant le filtre de Sobel et la dilation des arrêtes
3. 1 noeud s'occupant de réordonner chaque images d'arrêtes générées
4. 1 noeud s'occupant de grouper chaque pair successive d'arrêtes
5. 10 noeuds s'occupant d'effectuer la recherche d'arrêter dans l'image suivante
6. 1 noeud s'occupant de réordonner chaque résultats d'arrêtes sortantes et entrantes
7. 1 noeud s'occupant de la détection de transition à l'aide des arrêtes sortantes et entrantes

L'exécution sur un processeur AMD Ryzen Threadripper 1950x prend environ 3 secondes de temps
d'exécution sur les vidéos fournises.

Aucune librairie externe de traitement d'images fut utilisé. Tout fut implémenté à la mitaine.
Puisque Go ne fournit pas dans sa librairie standard des méthodes pour lire une vidéo, il faut
tout d'abord convertir le fichier vidéo en plusieurs images individuelles. Un outil pouvant
effectuer cette tâche est `ffmpeg` avec une ligne de commande similaire à celle-ci:

```
$ ffmpeg -i anni005.mpg images/%04d.png -hide_banner
```

Par la suite, on peut facilement exécuter le programme avec la ligne suivante:

```
$ ./bin/decompose do-sobel --directory images --format %04.png
```

== Question 4
Le programme écrit ne permet pas juste de trouver les coupures et les fondues, il peut aussi les
comparer avec la vérité obtenue à partir d'un fichier. Lors de la vérification des coupures, on
s'assure tout simplement que la position détectée est contenue dans le fichier. Pour les fondues,
on ne s'intérèsse que seulement s'il y a une intersection entre la zone détectée et celle attendue
dans le fichier vérité. Dans le cas contraire, il est très difficile d'obtenir exactement les
intervalles décrites dans le fichier.

La table suivante montre les résultats obtenues à partir de la séquence `anni005`.

.Résultats Obtenues
[%header]
|===
^| Séquence                               ^| `anni005`
^| Nombre de Coupures / Fondues           ^| 38 / 65
^| Coupures Bonnes / Mauvaises / Manquées ^| 33 / 9 / 5
^| Bonnes / Mauvaises Fondues             ^| 7 / 16
|===


== Question 5
On remarque que les coupures détectées sont en générale très bonne versus ce qui est attendues dans
la vérité. De plus, il n'y a pas eu tant de mauvaises coupures, ou de faux positifs. Il y a aussi
eu que 5 coupures manquées, c'est-à-dire que notre algorithme n'a pas été en mesure de détecter
en tant qu'une vrai coupure ou un faux positif.

Cela dit, le nombre de fondues détectées est assez médiocre et notre méthode semble même détecter
plus de faux positif que de vrais fondues. Cela est dû principalement à la méthode utilisée
ainsi qu'à la séquence contenue beaucoup de bruit. Les deux images suivantes montrent une bonne
coupure (bleu) avec la vérité (rouge), ainsi qu'une mauvaise coupure. On peut voir
que la hauteur des pics des arrêtes entrantes et sortantes varient beaucoup. Ce n'est donc pas
une bonne métrique pour déterminer les fondues.

[quote]
--
.Figure 1. Comparaison d'une bonne et mauvaise coupures
[.text-center]
image:image/scrap1.png[pdfwidth=39.5%]
image:image/scrap2.png[pdfwidth=39.5%]
--

== Question 6
_En raison des vérités erronées sur la séquence `NAD57`, seuleent la séquence `anni009` et
`anni0009` fut  utilisées dans la comparaison._

Les deux tables suivantes montrent les résultats pour les séquences `anni005` et `anni009`. Comme
attendue, la séquence `anni005` obtient des meilleurs résultats, avec plus de bonnes coupures,
moins de mauvaises et de manquées. Cela est logique, car cette séquence fut utilisée pour
ajuster l'algorithme et ses paramètres. Dans le cas des fondues, les résultats sont mixes. La
même séquence utilisé pour l'ajustement semble avoir un meilleur pourcentage de bonnes fondues,
mais aussi considérablement plus de faux positifs. Cela est encore dû à la méthode utilisée dans
la détection des fondues.

.Comparaison des Coupures
[%header]
|===
^| Séquence  ^| Bonnes Coupures ^| Mauvaises Coupures ^| Coupures Manquées
^| `anni005` ^| 36 (95 %)       ^| 4 (11 %)           ^| 2 (5 %)
^| `anni009` ^| 33 (87 %)       ^| 9 (24 %)           ^| 5 (13 %)
|===

.Comparaison des Fondues
[%header]
|===
^| Séquence  ^| Bonnes Fondues ^| Mauvaises Fondues
^| `anni005` ^| 7 (26 %)       ^| 23 (85 %)
^| `anni009` ^| 7 (11 %)       ^| 16 (25 %)
|===

Cela dit, on peut tout de même voir une limite importante de notre méthode. Celle-ci doit être
ajuster pour différents types de séquence. Même si ici, les deux séquences furent assez similaire,
il est évident que les paramètres de notre algorithme devront être ajusté afin de fonctionner sur
d'autres types de séquences, comme certaines avec plus de mouvement ou plus de couleur. 
